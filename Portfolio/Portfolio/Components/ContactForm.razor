@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime

<div class="contact-form">
    <h3>Contact Form</h3>
    
    @if (isSubmitted)
    {
        <div class="success-message">
            <p>Thank you for your message! I'll get back to you soon.</p>
            <button class="terminal-button" @onclick="ResetForm">Send another message</button>
        </div>
    }
    else
    {
        <EditForm Model="@contactModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="form-group">
                <label for="name">Name:</label>
                <InputText id="name" @bind-Value="contactModel.Name" class="terminal-input-field" />
                <ValidationMessage For="@(() => contactModel.Name)" />
            </div>
            
            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="contactModel.Email" class="terminal-input-field" />
                <ValidationMessage For="@(() => contactModel.Email)" />
            </div>
            
            <div class="form-group">
                <label for="message">Message:</label>
                <InputTextArea id="message" @bind-Value="contactModel.Message" class="terminal-input-field" rows="5" />
                <ValidationMessage For="@(() => contactModel.Message)" />
            </div>
            
            <button type="submit" class="terminal-button">Submit</button>
        </EditForm>
    }
</div>

@code {
    private ContactModel contactModel = new();
    private bool isSubmitted = false;

    private async Task HandleValidSubmit()
    {
        // In a real application, you would send this data to a server
        // For now, we'll just store it in localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "contactFormData", 
            System.Text.Json.JsonSerializer.Serialize(contactModel));
        
        isSubmitted = true;
    }

    private void ResetForm()
    {
        contactModel = new ContactModel();
        isSubmitted = false;
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Please enter your name")]
        public string Name { get; set; }
        
        [Required(ErrorMessage = "Please enter your email")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Please enter a message")]
        [MinLength(10, ErrorMessage = "Message must be at least 10 characters")]
        public string Message { get; set; }
    }
}
